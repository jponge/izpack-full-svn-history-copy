<?xml version='1.0' ?>
<article>


<informaltable><tgroup cols="2"><tbody><row><entry>
			<anchor id="tex2html332"/>
			<informalfigure><mediaobject><imageobject><imagedata fileref="next.png" width="37">24</imagedata></imageobject><caption><para>next</para></caption></mediaobject></informalfigure> 
			<anchor id="tex2html328"/>
			<informalfigure><mediaobject><imageobject><imagedata fileref="up.png" width="26">24</imagedata></imageobject><caption><para>up</para></caption></mediaobject></informalfigure> 
			<anchor id="tex2html322"/>
			<informalfigure><mediaobject><imageobject><imagedata fileref="prev.png" width="63">24</imagedata></imageobject><caption><para>previous</para></caption></mediaobject></informalfigure> 
			<anchor id="tex2html330"/>
			<informalfigure><mediaobject><imageobject><imagedata fileref="contents.png" width="65">24</imagedata></imageobject><caption><para>contents</para></caption></mediaobject></informalfigure> 
		</entry><entry>
			<ulink url="http://validator.w3.org/check?uri=referer"><informalfigure><mediaobject><imageobject><imagedata fileref="http://www.w3.org/Icons/valid-xhtml10">31</imagedata></imageobject><caption><para>Valid XHTML 1.0!</para></caption></mediaobject></informalfigure></ulink>
			<ulink url="http://jigsaw.w3.org/css-validator/"><informalfigure><mediaobject><imageobject><imagedata fileref="http://jigsaw.w3.org/css-validator/images/vcss">31</imagedata></imageobject><caption><para>Valid CSS!</para></caption></mediaobject></informalfigure></ulink>
		</entry></row>
<row><entry>
			<emphasis role="b">Next:</emphasis> <anchor id="tex2html333"/>writing installation xml files 
			<emphasis role="b">Up:</emphasis> <anchor id="tex2html329"/>izpack-doc
			<emphasis role="b">Previous:</emphasis> <anchor id="tex2html323"/>introduction
			<emphasis role="b">  <anchor id="tex2html331"/>contents</emphasis>
		</entry></row>
</tbody></tgroup></informaltable>
 


<para>
<?db2html element="br"?><anchor id="child_links"/><emphasis role="strong">Subsections</emphasis>
</para>
<itemizedlist spacing="compact"><listitem><para><anchor id="tex2html334"/>Overview</para></listitem><listitem><para><anchor id="tex2html335"/>Installation of Izpack
	  <itemizedlist spacing="compact"><listitem><para><anchor id="tex2html337"/>Windows</para></listitem><listitem><para><anchor id="tex2html338"/>UNIX/Linux</para></listitem></itemizedlist>
	</para></listitem><listitem><para><anchor id="tex2html335"/>First Compilation</para></listitem><listitem><para><anchor id="tex2html335"/>How to develop and debug IpPack using Eclipse
	  <itemizedlist spacing="compact"><listitem><para><anchor id="tex2html337"/>IzPack Installation</para></listitem><listitem><para><anchor id="tex2html338"/>Custom class sources and build.xml</para></listitem><listitem><para><anchor id="tex2html337"/>Eclipse</para></listitem><listitem><para><anchor id="tex2html338"/>Create IzPack project</para></listitem><listitem><para><anchor id="tex2html339"/>Debug compile (create the installer)</para></listitem><listitem><para><anchor id="tex2html340"/>Debug installation</para></listitem><listitem><para><anchor id="tex2html340"/>Debug uninstallation</para></listitem></itemizedlist>
	</para></listitem><listitem><para><anchor id="tex2html336"/>The IzPack architecture
	  <itemizedlist spacing="compact"><listitem><para><anchor id="tex2html337"/>The compilation system</para></listitem><listitem><para><anchor id="tex2html338"/>How an installer works</para></listitem><listitem><para><anchor id="tex2html339"/>The different kinds of installers</para></listitem><listitem><para><anchor id="tex2html340"/>Installers for older VM versions</para></listitem></itemizedlist>
	</para></listitem></itemizedlist>

<hr xmlns="http://www.w3.org/1999/xhtml"/>

<title>Getting started</title>
<title>Overview</title>

<para>
To begin with, you should know what IzPack is organized if you want to use
it. let's go into the directory where you have installed IzPack on your
machine. There are 3 text files and a set of directories. The most
important for the moment are <literal>bin/ doc/ sample/</literal>. If you are reading this,
you already know that <literal>doc</literal> contains this documentation :-)
<?db2html element="br"?>
So let's go into <literal>bin/</literal>. The <literal>icons/</literal> directory contains some
directories for your system, in case you would like an icon to launch a
component of IzPack . But the most important things you can see in <literal>bin</literal>
are the <literal>compile</literal> scripts (in both unix* and windows formats).
<literal>Compile</literal> is used to compile a ready-to-go xml installation file from
a command-line context or from an external tool.
<?db2html element="br"?>

<emphasis role="i">Note : these scripts can be launched from anywhere on your system as the
installer has customized these scripts so that they can inform IzPack of where
it is located.</emphasis>
<?db2html element="br"?>
</para>

<title>Installation of Izpack</title>

<para>
First go get the latest stable version of IzPack from: <ulink url="http://www.izforge.com/izpack/index.php?page=download">http://www.izforge.com/izpack/index.php?page=download</ulink>
</para>
<para/><section id="section0034100000000000000"><title>Windows</title>
<para>
If needed download the Latest Java Run Time from Sun's website <ulink url="http://java.sun.com/">http://java.sun.com/</ulink>. You should get the JRE if you intend to ONLY run the installer and get the SDK if you're willing to compile as well.<?db2html element="br"?><?db2html element="br"?>
 
Don't forget to set up the environment variables:<?db2html element="br"?>
</para>
<itemizedlist spacing="compact"><listitem><para>If using the SDK:<?db2html element="br"?><?db2html element="br"?>
set JAVA_HOME="C:\j2sdk1.4.2_04"<?db2html element="br"?>
set JRE_HOME=%JAVA_HOME%/jre<?db2html element="br"?>
set CLASSPATH=%JAVA_HOME%/bin;%CLASSPATH%<?db2html element="br"?>
set PATH=%JAVA_HOME%/bin;%JRE_HOME%/bin;%PATH%<?db2html element="br"?><?db2html element="br"?>
This is obvioulsy assuming that SDK has been installed to "C:\j2sdk1.4.2_04"<?db2html element="br"?><?db2html element="br"?>
</para></listitem><listitem><para>If using the JRE:<?db2html element="br"?><?db2html element="br"?>
set JAVA_HOME="C:\Program Files\Java\j2re1.4.2_05"<?db2html element="br"?>
set CLASSPATH=%JAVA_HOME%/bin;%CLASSPATH%<?db2html element="br"?>
set PATH=%JAVA_HOME%/bin;%PATH%<?db2html element="br"?><?db2html element="br"?>
This is obvioulsy assuming that SDK has been installed to "C:\Program Files\Java\j2re1.4.2_05"
</para></listitem></itemizedlist>
<para> 
Once this is done, you can install IzPack using the following command:<?db2html element="br"?>
java -jar izpack.jar<?db2html element="br"?><?db2html element="br"?>
 
Where izpack.jar is the latest release you downloaded from IzPack website.
</para>
<para/></section><section id="section0034200000000000000"><title>UNIX/Linux</title>
<para>
If needed download the Latest Java Run Time from Sun's website http://java.sun.com/. You should get the JRE if you intend to ONLY run the installer, but you should get the SDK if you're willing to compile as well.
</para>
<itemizedlist spacing="compact"><listitem><para>If using the SDK:<?db2html element="br"?><?db2html element="br"?>
export JAVA_HOME=/usr/java/j2sdk1.4.2_06<?db2html element="br"?>
export JAVA_JAR=/usr/java/java_jar<?db2html element="br"?>
export JRE_HOME=/usr/java/j2sdk1.4.2_06/jre<?db2html element="br"?>
export CLASSPATH=/usr/java/j2sdk1.4.2_06/bin<?db2html element="br"?>
export PATH=/usr/java/j2sdk1.4.2_06/bin:/usr/java/j2sdk1.4.2_06/jre/bin:$PATH<?db2html element="br"?><?db2html element="br"?>
 
This is obvioulsy assuming that java has been installed to /usr/java/j2sdk1.4.2_06<?db2html element="br"?><?db2html element="br"?>
</para></listitem><listitem><para>If using the JRE:<?db2html element="br"?><?db2html element="br"?>
export JAVA_HOME=/usr/java/j2re1.4.2_05"<?db2html element="br"?>
export CLASSPATH=$JAVA_HOME/bin:$CLASSPATH<?db2html element="br"?>
export PATH=$JAVA_HOME/bin:$PATH<?db2html element="br"?><?db2html element="br"?>
 
This is obvioulsy assuming that SDK has been installed to "/usr/java/j2re1.4.2_05"
</para></listitem></itemizedlist>
<para>
You can put them into any script launched at startup if you don't want to have to do it everytime.<?db2html element="br"?>
For example, .bashrc of your user, so that whenever you'll start a bash console the variables will be set.<?db2html element="br"?><?db2html element="br"?>
 
To verify that the environment is correct, type SET in the command prompt and check if those variables are set before running any compilation.<?db2html element="br"?><?db2html element="br"?>
 
=&gt; Then you install IzPack using the following command:<?db2html element="br"?>
java -jar izpack.jar<?db2html element="br"?><?db2html element="br"?>
 
By default it will be installed in /usr/local/IzPack.<?db2html element="br"?>
Therefore you can create two scripts, one for compiling your code and the second to execute the installer.<?db2html element="br"?><?db2html element="br"?>
 
Compile.sh:<?db2html element="br"?>
#!/bin/sh<?db2html element="br"?>
/usr/local/IzPack/bin/compile /yourpath/Install.xml -b /yourpath -o /yourpath/yourjaroutput.jar -k standard<?db2html element="br"?><?db2html element="br"?>
 
Install.sh:<?db2html element="br"?>
#!/bin/sh<?db2html element="br"?>
java -jar yourjaroutput.jar<?db2html element="br"?><?db2html element="br"?>
</para>
<para>BUGS and TROUBLESHOOTING</para>
<orderedlist spacing="compact"><listitem><para>
This is assuming that you're current Unix/Linux allows the use of the server X. In cas it doesn't here is a way to install IzPack using cygwin (thanks to Shrish Buradkar and Bartz Klaus for this trick):<?db2html element="br"?><?db2html element="br"?>
 
Install cygwin on a remote machine. Cygwin can be downloaded from <ulink url="http://www.cygwin.com/">http://www.cygwin.com/</ulink><?db2html element="br"?>
Firstly, start the XWindows server on your PC. This could be done by using the startxwin-multiwindow batch file or running /usr/X11R6/bin/startxwin.sh <?db2html element="br"?>
From the cygwin Xterm, type xhost +<?db2html element="br"?>
Then telnet to the remote UNIX/Linux machine and set the DISPLAY to your PC. So after you have logged into the remote machine, do export DISPLAY=pc-ip-adress:0.0 xterm &amp; java -jar installer.jar<?db2html element="br"?>
This should do the job by displaying an xterm from the remote machine onto yor PC.<?db2html element="br"?><?db2html element="br"?>
</para></listitem><listitem><para>
Normally launching packages created by IzPack under Gnome, KDE or 
XFCE works fine. If when trying to launch a pack you receive this error message:
<programlisting>
Exception in thread "main" java.lang.InternalError: Can't connect to X11 
window server using ':0.0' as the value of the DISPLAY variable.
        at sun.awt.X11GraphicsEnvironment.initDisplay(Native Method)
        at 
sun.awt.X11GraphicsEnvironment.&lt;clinit&gt;(X11GraphicsEnvironment.java:134)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:141)
        at 
java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment(GraphicsEnvironment.java:62)
        at java.awt.Font.initializeFont(Font.java:308)
        at java.awt.Font.&lt;init&gt;(Font.java:344)
        at 
com.izforge.izpack.gui.IzPackMetalTheme.createFont(IzPackMetalTheme.java:62)
        at 
com.izforge.izpack.gui.IzPackMetalTheme.&lt;init&gt;(IzPackMetalTheme.java:52)
        at 
com.izforge.izpack.gui.IzPackKMetalTheme.&lt;init&gt;(IzPackKMetalTheme.java:59)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native 
Method)
        at 
sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
        at 
sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:274)
        at java.lang.Class.newInstance0(Class.java:308)
        at java.lang.Class.newInstance(Class.java:261)
        at 
com.izforge.izpack.installer.GUIInstaller.loadLookAndFeel(GUIInstaller.java:297)
        at 
com.izforge.izpack.installer.GUIInstaller.&lt;init&gt;(GUIInstaller.java:100)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native 
Method)
        at 
sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
        at 
sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:274)
        at java.lang.Class.newInstance0(Class.java:308)
        at java.lang.Class.newInstance(Class.java:261)
        at com.izforge.izpack.installer.Installer.main(Installer.java:47)
</programlisting>
Then, it's most probably the fact that in some distribution the console and environment variables are "erased" 
when switching between users. So, you can type 'su -' in order to obtain all commands. With 'su -' $DISPLAY variables is erased and all X11 connections is refused. So, a best and fast practice in this way is:<?db2html element="br"?><?db2html element="br"?>

<orderedlist spacing="compact"><listitem><para>Log in your system by user</para></listitem><listitem><para>In shell type:<?db2html element="br"?>
$ echo $DISPLAY<?db2html element="br"?>
the result seems to be ':0.0'. If the response isn't there you can type:<?db2html element="br"?>
$ export $DISPLAY=":0.0"
</para></listitem><listitem><para>Now type  $su<?db2html element="br"?>for a "normal" alias by root.</para></listitem><listitem><para>Run: $ java -jar "package.jar"<?db2html element="br"?></para></listitem></orderedlist>
</para></listitem></orderedlist>

<title>First Compilation</title>

<para>
Now you probably can't wait to build your first installer. So go on open a
command-line shell and navigate to <literal>sample/</literal>. The following should work
on both unix* and windows systems. for the latter, just change the path
separator (slash '/') to a backslash. So type ($ is your shell prompt !) :
</para>
<programlisting>
$ ../bin/compile install.xml -b . -o install.jar -k standard
 (installer generation text output here)
$ java -jar install.jar
</programlisting>
<para>
There you are! The first command has produced the installer and the
second one did launch it.
</para>

<title>How to develop and debug IpPack using Eclipse</title>
<para>
(thanks to Bartz Klaus)<?db2html element="br"?><?db2html element="br"?>
Here are the steps needed to develop adn debug IzPack with Eclipse:
</para>
<orderedlist spacing="compact"><listitem><para><title>IzPack Installation</title>
Install the latest stable release of IzPack with the sources !<?db2html element="br"?>
For more details see the section "IzPack Installation".<?db2html element="br"?><?db2html element="br"?>
</para></listitem><listitem><para><title>Custom class sources and build.xml</title>
Put your custom class sources under<?db2html element="br"?>
%IZPACK_HOME%\src\lib<?db2html element="br"?>
may be<?db2html element="br"?>
%IZPACK_HOME%\src\lib\com\izforge\izpack\panels\MyPanel.java<?db2html element="br"?>
Add a create rule into %IZPACK_HOME%\src\build.xml<?db2html element="br"?>
under target "build.panels"<?db2html element="br"?><?db2html element="br"?></para></listitem><listitem><para><title>Eclipse</title>
 
You can get Eclipse from <ulink url="http://www.eclipse.org/downloads/index.php">http://www.eclipse.org/downloads/index.php</ulink><?db2html element="br"?><?db2html element="br"?></para></listitem><listitem><para><title>Create IzPack project</title>
Select<?db2html element="br"?>
File &gt; New &gt; Project...<?db2html element="br"?>
Java &gt; Java Project &gt; next &gt;<?db2html element="br"?>
give a project name like "IzPack"<?db2html element="br"?>
deselect "Use default" ( 2.x) or<?db2html element="br"?>
select "Create project at external location" (3.x)<?db2html element="br"?>
Browse to %IZPACK_HOME%\src\lib select it<?db2html element="br"?>
Next &gt;<?db2html element="br"?>
In "Libraries" select "Add External JARs..."<?db2html element="br"?>
select ant.jar and jakarta-regexp-1.3.jar from %IZPACK_HOME%\lib<?db2html element="br"?>
Finish<?db2html element="br"?><?db2html element="br"?></para></listitem><listitem><para><title>Debug compile (create installation)</title>
Select<?db2html element="br"?>
Run &gt; Debug...<?db2html element="br"?>
Java Application<?db2html element="br"?>
New<?db2html element="br"?>
give a name e.g. "CompileMyInstall"<?db2html element="br"?>
select in "Main" the project "IzPack"<?db2html element="br"?>
select as "main class" "Compile" (from package com.izforge.izpack.compiler)<?db2html element="br"?>
As "Program arguments" put in (for %SOME_THING% use your local value)<?db2html element="br"?>
-HOME %IZPACK_HOME% %SRC_ROOT%\%CONFIG_SUBPATH%\install.xml -b %SRC_ROOT% -o %INSTALLER_DEST%\install.jar<?db2html element="br"?><?db2html element="br"?>

No you can debug the compiling of your installation.<?db2html element="br"?><?db2html element="br"?></para></listitem><listitem><para><title>Debug installation</title>
Compile your installation; now you have<?db2html element="br"?>
%INSTALLER_DEST%\install.jar<?db2html element="br"?>
Run &gt; Debug...<?db2html element="br"?>
Java Application<?db2html element="br"?>
New<?db2html element="br"?>
give a name e.g. "InstallMyInstall"<?db2html element="br"?>
select in "Main" the project "IzPack"<?db2html element="br"?>
select as "main class" "Installer" (from package com.izforge.izpack.installer)<?db2html element="br"?>
as "VM arguments" use <?db2html element="br"?>
-DTRACE=true<?db2html element="br"?>
select the tab "Classpath"<?db2html element="br"?>
select "User classes" (2.x) or "User Entries" (3.x)<?db2html element="br"?>
select "Add External JARs..."<?db2html element="br"?>
select %INSTALLER_DEST%\install.jar (may be, that's the trick...)<?db2html element="br"?>
install.jar must be under the project entry<?db2html element="br"?>

For 2.x :<?db2html element="br"?>
copy %IZPACK_HOME%\bin\native\izpack\ShellLink.dll  to<?db2html element="br"?>
%IZPACK_HOME%\src\lib\com\izforge\izpack\util\os\ShellLink.dll<?db2html element="br"?><?db2html element="br"?>

Now you can debug the installation. With 2.x you can edit on demand,<?db2html element="br"?>
if %INSTALLER_DEST%\install.jar is shown in "Classpath" under the<?db2html element="br"?>
project.<?db2html element="br"?>
With 3.x it seems so, that always the JAR will be loaded; therefore<?db2html element="br"?>
the contents of install.jar and the sources should be synchron.<?db2html element="br"?><?db2html element="br"?></para></listitem><listitem><para><title>Debug uninstallation</title>
Install your installation to<?db2html element="br"?>
%INSTALL_PATH%<?db2html element="br"?>
Run &gt; Debug...<?db2html element="br"?>
Java Application<?db2html element="br"?>
New<?db2html element="br"?>
give a name e.g. "UninstallMyInstall"<?db2html element="br"?>
select in "Main" the project "IzPack"<?db2html element="br"?>
select as "main class" "Uninstaller" (from package com.izforge.izpack.installer)<?db2html element="br"?>
as "VM arguments" use <?db2html element="br"?>
-DTRACE=true<?db2html element="br"?>
select the tab "Classpath"<?db2html element="br"?>
select "User classes" (2.x) or "User Entries" (3.x)<?db2html element="br"?>
select "Add External JARs..."<?db2html element="br"?>
select %INSTALL_PATH%\Uninstaller\uninstall.jar<?db2html element="br"?>
uninstall.jar must be under the project entry<?db2html element="br"?><?db2html element="br"?>

Now, you can debug your uninstallation. Don't worry if you get first a NullPointerException in SelfModifier. This should be; it is a hint, that the class files of your eclipse session are used. <?db2html element="br"?>
If debugging not working, look whether:<?db2html element="br"?>
    <itemizedlist spacing="compact"><listitem><para>there is a fresh installation</para></listitem><listitem><para>the uninstall.jar is in the "Classpath" tab under the project entry</para></listitem></itemizedlist>
</para></listitem></orderedlist>
<title>The IzPack architecture</title>

<para>
Now that you have packaged your first installer, it's time for you to understand
how the whole thing works.
<?db2html element="br"?>
</para>

<para/></section><section id="section00331000000000000000"><title>The compilation system</title>

<para>
The compilation system (see figure <link linkend="comparch">1.1</link>) is quite modular. 
indeed, you can use the compiler in 2 ways :
</para>
<itemizedlist spacing="compact"><listitem><para>from a command-line
</para></listitem><listitem><para>from jakarta ant
</para></listitem></itemizedlist> 

<anchor id="comparch"/><anchor id="310"/>
<informaltable><tgroup cols="1"><tbody><row><entry>

<informalfigure><mediaobject><imageobject><imagedata fileref="img2.png" width="382">370</imagedata></imageobject><caption><para>The compiler architecture</para></caption></mediaobject></informalfigure>
</entry></row>
</tbody></tgroup></informaltable>


<para>
The compiler takes as its input an xml installation file that describes
(at a relatively high-level) the installation. this file contains
detailed information such as the application name, the authors, the
files to install, the panels to use, which resources to load and much
more (see figure <link linkend="archinstaller">1.2</link>).
<?db2html element="br"?>
The compiler can generate different kinds of installers, but this information is
not located inside the xml file as it is not were it should be. On the contrary,
this is a compiler parameter.
<?db2html element="br"?>
The compilation options for a command-line installer are the following:
</para>
<itemizedlist spacing="compact"><listitem><para><literal>-?</literal>: Gives a list of the available options.
</para></listitem><listitem><para><literal>-b</literal>: Specifies the base path, <emphasis role="i">ie</emphasis> the one that will be
used to resolve the relative paths. if your xml file contains absolute paths,
specify it to an empty string (<literal>-b ""</literal>).
</para></listitem><listitem><para><literal>-k</literal>: Specifies the installer kind, for instance most users will
want <literal>standard</literal> here.
</para></listitem><listitem><para><literal>-o</literal>: Specifies the resulting installer jar file name.
</para></listitem></itemizedlist> 

<para/></section><section id="section00332000000000000000"><title>
How an installer works
</title>

<para>
An installer presents its panels to the end-user. for instance, there is
one to select the packages, one to prompt for the license agreement, one
to select the installation path and so on. You have a choice from a
variety of panels to place in the installer. For example, you can choose
between a plain text and a html text panel for the license agreement.
also, if you don't want of the <emphasis role="i">hellopanel</emphasis>, you just don't
include it.
<?db2html element="br"?>
</para>

<anchor id="archinstaller"/><anchor id="312"/>
<informaltable><tgroup cols="1"><tbody><row><entry>

<informalfigure><mediaobject><imageobject><imagedata fileref="img3.png" width="525">423</imagedata></imageobject><caption><para>The installer architecture</para></caption></mediaobject></informalfigure>
</entry></row>
</tbody></tgroup></informaltable>


<para>
It is very important to understand that some of the panels may need extra data. for
instance, the license agreement panel needs the license text. A simple approach
to specify such data would have been to add as many xml tags as needed for
each panel. However, this makes the xml file too specific and not easy to
maintain. The approach that has been chosen is to put the data in files and we
call these files <emphasis role="i">resource files</emphasis>. They are specified with a unique xml
tag. this is a much cleaner approach.
<?db2html element="br"?>
You might wonder how your files are packaged. They can be grouped in
<emphasis role="i">packs</emphasis>. For instance, you can have one pack for the core files, one for
the documentation, one for the source code and so on. In this way, your end-users
will have the choice to install a pack or not (provided that the pack they don't
want to install is not mandatory). Inside the jar file (which is a zip file), a
sub directory contains the pack files. Each pack file contains the files that are
part of it. Could we do it simpler ? :-)
<?db2html element="br"?>
</para>

<para/></section><section id="section00333000000000000000"><title>
The different kinds of installers
</title>

<para>
There are 2 kinds of installers available :
</para>
<itemizedlist spacing="compact"><listitem><para><literal>Standard</literal> : a single-file ready-to-run installer
</para></listitem><listitem><para><literal>Web</literal> : a web based installer (pack data is located on
  an http server, and the installer retrieves it at install time (see
  section&#160;<ulink url="node5.html#webinstaller">3.6</ulink>))
</para></listitem></itemizedlist>

<para/></section><section id="section00334000000000000000"><title>
Installers for older vm versions
</title>
<para>
By default the installer will be made for the current most used version of
the java runtime environment. It is possible to create an installation that
is runable with an older vm version.
<?db2html element="br"?>
What version is used can be detected in the ant properties file that is used 
to build izpack. It is <literal>[izpackroot]/src/ant.properties</literal>. 
The value of the property "source" determines the vm version.
<?db2html element="br"?>
If compatibility to older versions is needed, a recompilation of the jar files 
of the izpack system should be done. For this the sources of izpack and an ant
installation are needed. the sources of izpack are selectable at installation
time of izpack. Before a recompilation of all can be triggered, the version of 
byte code should be changed. This can be done simple by changing the "source" 
entry in <literal>[izpackroot]/src/ant.properties</literal> to the needed value. The 
recompilation should be performed with the current most used vm version 
because there are classes of it referenced in the izpack code. Usage of an 
older vm version at installation time will be possible because the classes of
the newer vm version are only used after a vm version check. Of course, some 
features of izpack will be missing at using an old vm version. To recompile
izpack go into <literal>[izpackroot]/src</literal>. Use a current jdk (not jre) for this. 
call</para>
<programlisting>
ant clean
</programlisting>
<para>followed by</para>
<programlisting>
ant all
</programlisting>
<para>then all jar files in <literal>[izpackroot]/lib</literal>, 
<literal>[izpackroot]/bin/panels</literal> and <literal>[izpackroot]/bin/customactions</literal>
should be recompiled with the selected source version.
</para>
<hr xmlns="http://www.w3.org/1999/xhtml"/>


<informaltable><tgroup cols="2"><tbody><row><entry>
			<anchor id="tex2html332"/>
			<informalfigure><mediaobject><imageobject><imagedata fileref="next.png" width="37">24</imagedata></imageobject><caption><para>next</para></caption></mediaobject></informalfigure> 
			<anchor id="tex2html328"/>
			<informalfigure><mediaobject><imageobject><imagedata fileref="up.png" width="26">24</imagedata></imageobject><caption><para>up</para></caption></mediaobject></informalfigure> 
			<anchor id="tex2html322"/>
			<informalfigure><mediaobject><imageobject><imagedata fileref="prev.png" width="63">24</imagedata></imageobject><caption><para>previous</para></caption></mediaobject></informalfigure> 
			<anchor id="tex2html330"/>
			<informalfigure><mediaobject><imageobject><imagedata fileref="contents.png" width="65">24</imagedata></imageobject><caption><para>contents</para></caption></mediaobject></informalfigure> 
		</entry><entry>
			<ulink url="http://validator.w3.org/check?uri=referer"><informalfigure><mediaobject><imageobject><imagedata fileref="http://www.w3.org/Icons/valid-xhtml10">31</imagedata></imageobject><caption><para>Valid XHTML 1.0!</para></caption></mediaobject></informalfigure></ulink>
			<ulink url="http://jigsaw.w3.org/css-validator/"><informalfigure><mediaobject><imageobject><imagedata fileref="http://jigsaw.w3.org/css-validator/images/vcss">31</imagedata></imageobject><caption><para>Valid CSS!</para></caption></mediaobject></informalfigure></ulink>
		</entry></row>
<row><entry>
			<emphasis role="b">Next:</emphasis> <anchor id="tex2html333"/>writing installation xml files 
			<emphasis role="b">Up:</emphasis> <anchor id="tex2html329"/>izpack-doc
			<emphasis role="b">Previous:</emphasis> <anchor id="tex2html323"/>introduction
			<emphasis role="b">  <anchor id="tex2html331"/>contents</emphasis>
		</entry></row>
</tbody></tgroup></informaltable>
 
<address xmlns="http://www.w3.org/1999/xhtml">Julien Ponge 2005-05-24</address>

<para/></section></article>