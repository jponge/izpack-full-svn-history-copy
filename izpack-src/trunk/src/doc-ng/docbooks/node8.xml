<?xml version='1.0' ?>
<article>
  
   
	<informaltable><tgroup cols="2"><tbody><row><entry><anchor id="tex2html501"/><informalfigure><mediaobject><imageobject><imagedata fileref="next.png" width="37">24</imagedata></imageobject><caption><para>next</para></caption></mediaobject></informalfigure> <anchor id="tex2html497"/><informalfigure><mediaobject><imageobject><imagedata fileref="up.png" width="26">24</imagedata></imageobject><caption><para>up</para></caption></mediaobject></informalfigure> <anchor id="tex2html491"/><informalfigure><mediaobject><imageobject><imagedata fileref="prev.png" width="63">24</imagedata></imageobject><caption><para>previous</para></caption></mediaobject></informalfigure> <anchor id="tex2html499"/><informalfigure><mediaobject><imageobject><imagedata fileref="contents.png" width="65">24</imagedata></imageobject><caption><para>contents</para></caption></mediaobject></informalfigure></entry><entry><ulink url="http://validator.w3.org/check?uri=referer"><informalfigure><mediaobject><imageobject><imagedata fileref="http://www.w3.org/Icons/valid-xhtml10">31</imagedata></imageobject><caption><para>Valid XHTML 1.0!</para></caption></mediaobject></informalfigure></ulink> <ulink url="http://jigsaw.w3.org/css-validator/"><informalfigure><mediaobject><imageobject><imagedata fileref="http://jigsaw.w3.org/css-validator/images/vcss">31</imagedata></imageobject><caption><para>Valid CSS!</para></caption></mediaobject></informalfigure></ulink></entry></row>
<row><entry><emphasis role="b">Next:</emphasis> <anchor id="tex2html502"/>Custom Actions <emphasis role="b">Up:</emphasis> <anchor id="tex2html498"/>izpack-doc <emphasis role="b">Previous:</emphasis> <anchor id="tex2html492"/>Creating Your Own Panels <emphasis role="b"><anchor id="tex2html500"/>Contents</emphasis></entry></row>
</tbody></tgroup></informaltable>
	
  
     
    <para><?db2html element="br"?><anchor id="CHILD_linkS"/><emphasis role="strong">Subsections</emphasis> </para>
    <itemizedlist spacing="compact"><listitem><para>
        <anchor id="tex2html503"/>The Basic XML Structure
      </para></listitem><listitem><para>
        <anchor id="tex2html504"/>Concepts and XML Elements Common to All Fields
      </para></listitem><listitem><para>
        <anchor id="tex2html505"/>Internationalization
      </para></listitem><listitem><para>
        <anchor id="tex2html506"/>Panel Title
      </para></listitem><listitem><para>
        <anchor id="tex2html507"/>Static Text
      </para></listitem><listitem><para>
        <anchor id="tex2html508"/>Visual Separation
      </para></listitem><listitem><para>
        <anchor id="tex2html509"/>Text Input
      </para></listitem><listitem><para>
        <anchor id="tex2html510"/>Radio Buttons
      </para></listitem><listitem><para>
        <anchor id="tex2html511"/>Combo Box
      </para></listitem><listitem><para>
        <anchor id="tex2html512"/>Check Box
      </para></listitem><listitem><para>
        <anchor id="tex2html513"/>Rule Input 
        <itemizedlist spacing="compact"><listitem><para>
            <anchor id="tex2html514"/>Layout and Input Rules
          </para></listitem><listitem><para>
            <anchor id="tex2html515"/>Setting Field Content
          </para></listitem><listitem><para>
            <anchor id="tex2html516"/>The Output Format
          </para></listitem><listitem><para>
            <anchor id="tex2html517"/>Validating the Field Content 
            <itemizedlist spacing="compact"><listitem><para>
                <anchor id="tex2html518"/>NotEmptyValidator
              </para></listitem><listitem><para>
                <anchor id="tex2html519"/>RegularExpressionValidator
              </para></listitem><listitem><para>
                <anchor id="tex2html520"/>Creation Your Own Custom Validator
              </para></listitem></itemizedlist>
          </para></listitem><listitem><para>
            <anchor id="tex2html521"/>Processing the Field Content
          </para></listitem><listitem><para>
            <anchor id="tex2html522"/>Summary Example
          </para></listitem></itemizedlist>
        <?db2html element="br"?>
      </para></listitem><listitem><para>
        <anchor id="tex2html523"/>Search 
        <itemizedlist spacing="compact"><listitem><para>
            <anchor id="tex2html524"/>Specification
          </para></listitem><listitem><para>
            <anchor id="tex2html525"/>Example
          </para></listitem></itemizedlist>
      </para></listitem></itemizedlist>
    
    <hr xmlns="http://www.w3.org/1999/xhtml"/>
    <title>
      <?db2html element="br"?>
      User Input
    </title>
    <para>(by Elmar G<small xmlns="http://www.w3.org/1999/xhtml">ROM</small>) <?db2html element="br"?></para>
    <para>
      Most of the panels that come with IzPack take user input in some form. In some panels this is through a simple user acknowledgment in others the user can enter text or select a directory
      through a file open dialog. In all of those cases the user input is used for the specific purpose needed by the panel that takes the input. However, if you need user input during installation
      that will later on be available to your application then you need to use the user input panel.<?db2html element="br"?>
    </para>
    <para>
      To use this panel, list it in the install file with the class name <literal>UserInputPanel</literal>. In addition, you must write a XML specification and add it to the install resources. The name of this
      resource must be <literal>userInputSpec.xml</literal>.<?db2html element="br"?>
    </para>
    <para>
      The user input panel is a blank panel that can be populated with UI elements through a XML specification file. The specification supports text labels, input elements, explanatory text and some
      minor formatting options.<?db2html element="br"?>
    </para>
    <para>
      The following types of user input elements are supported:
    </para>
    <itemizedlist spacing="compact"><listitem><para>
        Text
      </para></listitem><listitem><para>
        Combo Box
      </para></listitem><listitem><para>
        Radio Buttons
      </para></listitem><listitem><para>
        Check Box
      </para></listitem><listitem><para>
        Rule Input Field
      </para></listitem><listitem><para>
        Search Field
      </para></listitem></itemizedlist>
    <para>
      The way in which this panel conveys the user input to your application is through the variable substitution system. User input is not directly inserted into your configuration files but the
      variables that you specify for this panel are set in the variable substitution system. After this operation has taken place the variables and associated values are available for all
      substitutions made. This way of operation has a number of implications that you should be aware of.<?db2html element="br"?>
    </para>
    <para>
      First, not only can you set additional variables in this way but you can also modify variables that are defined elsewhere -even built in variables. For this reason you should be careful to
      avoid overlaps when choosing variable names. Although there might be cases when it seems useful to modify the value of other variables, it is generally not a good idea to do so. Because you
      might not exactly know when other variables are set and when and where they are used throughout the installation process, there might be unintended side effects.<?db2html element="br"?>
    </para>
    <para>
      Second, the panel must be shown at a point during the installation process before the variables are used. In most cases you will use the values to substitute variables in launch and
      configuration files that you supply with your installation. For this to work you place this panel before the install panel, because the install panel uses the variable substitutor to replace
      all such variables. Although using this panel any later in the process will correctly set the variables internally, there won't be any affect on the files written to disk. You can also use
      variables set in this way in other panels that you have written yourself. There is a section in the chapter on writing your own panel that explains how to do this. Also in this case it is
      important to place the associated input panel in the process before the variables are used.<?db2html element="br"?>
    </para>
    <para>
      At this point i would also like to mention that it is possible to hide select elements on the panel or the panel altogether if certain packs are not selected. For this to work you must place
      this panel after the packs panel. One side effect of using this feature is that it is not possible to step back once the user input panel is displayed. This is because the user might make
      changes in the packs selection that would require a complete rebuild of the UI. Unfortunately, building the UI is an irreversible process, therefore the user can not be allowed to go back to
      the packs panel.<?db2html element="br"?>
    </para>
    <title>
      The Basic XML Structure
    </title>
    <para>
      The top level XML section is called <literal>&lt;userInput&gt;</literal>. For most panels it does not make sense to present them more than once, however you might want to present multiple user input
      panels -with different content of course. Therefore the <literal>&lt;userInput&gt;</literal> section can contain multiple tags that each specify the details for one panel instance. The tag name for this
      is <literal>&lt;panel&gt;</literal>.<?db2html element="br"?>
    </para>
    <para>
      The <literal>&lt;panel&gt;</literal> tag uses the following attributes:<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">order</emphasis> <literal>- required</literal><?db2html element="br"?>
    </para>
    <para>
      This is the order number of the user input panel for which this specification should be used. Counting starts at 0 and increments by 1 for each instance of the user input panel. So if a spec
      should be used for the second occurrence of the user input panel use <literal>order="1"</literal>.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">layout</emphasis> <literal>- optional</literal><?db2html element="br"?>
    </para>
    <para>
      There are three general layout rules this panel uses, they are <literal>left</literal>, <literal>center</literal> and <literal>right</literal>. While i think left is most commonly used, you might want to experiment with
      this attribute and see which you like best. The default is <literal>left</literal>.<?db2html element="br"?>
    </para>
    <title>
      Concepts and XML Elements Common to All Fields
    </title>
    <para>
      Before i dive into the details of defining the various UI elements i would like to present XML elements and general concepts that apply throughout. This saves me a lot of work in writing and
      you a lot of repetitive reading and maybe a tree or two.<?db2html element="br"?>
    </para>
    <para>
      The UI elements are generally laid out top to bottom in the order they appear in the XML file. The only exception to this rule is the title, which always appears at the very top. The layout
      pattern for the input fields is as follows: If a description is defined, it appears first, using the full available layout width. The input field is placed beneath the description. With fields
      such as the text field or the combo box, the label is placed to the left and the input field to the right. Fields such as radio buttons and check boxes are somewhat indented and have the label
      text appear to their right.<?db2html element="br"?>
    </para>
    <para>
      Each UI element is specified with a <literal>&lt;field&gt;</literal> tag. The <literal>type</literal> attribute is used to specify what kind of field you want to place. Obviously, the <literal>type</literal> attribute is
      not optional.<?db2html element="br"?>
    </para>
    <para>
      Each field that takes user input must also specify the variable that should be substituted. This is done with the <literal>variable</literal> attribute.<?db2html element="br"?>
    </para>
    <para>
      <anchor id="userInput:descriptiontag"/>Almost all fields allow a description. When a description is allowed it is always added in the same way. The description is part of the data within the
      field tag. There can only be one description per field. If you add more than one, the first one is used and the others ignored. There are three attributes used with this tag. The text is
      specified through the <literal>txt</literal> or the <literal>id</literal> attribute. The details on using them are described below. The attributes are all optional but you must specify text to use, either directly
      or through the <literal>id</literal> attribute. In addition, you can set the text justification to <literal>left</literal>, <literal>center</literal> and <literal>right</literal> with the <literal>align</literal> attribute.<?db2html element="br"?>
    </para>
    <para>
      The following example illustrates the general pattern for field specification:<?db2html element="br"?>
    </para>
<programlisting>
&lt;field type="text" variable="myFirstVariable"&gt;
  &lt;description align="left" txt="A description" id="description 1"/&gt;
  .
  .
  .
&lt;/field&gt;
</programlisting>
    <para>
      A very frequently used pattern is for the definition of text. Where ever text is needed (labels, descriptions, static text, choices etc.) it can be specified in place using the <literal>txt</literal>
      attribute. This is convenient if you are only supporting a single language. However, if you would like to separate your text definitions from the panel specification or if you need to support
      multiple languages you might want to use the <literal>id</literal> attribute instead to only specify an identifier. You can then add multiple XML files with the same name as this spec file
      (userInputSpec.xml) appended with an unserscore '_' and the the appropriate three letter ISO3 language code. The content of those files must conform to the specification for IzPack language
      packages. For more details on this topic see the chapter on language packages under advanced features. <literal>id</literal> defines an identifier that is also defined in the language package, together
      with the localized text to use. It is possible to use both the <literal>txt</literal> and the <literal>id</literal> attribute. In this case the text from the language package is used. If for some reason the
      language package is not available or the <literal>id</literal> is not defined there, the text specified with <literal>txt</literal> is used as default.<?db2html element="br"?>
    </para>
    <para>
      All input fields can be pre-set with a value of your choice. Although the details vary a bit from field type to field type, the <literal>set</literal> attribute is always used to accomplish this. The
      <literal>set</literal> attribute is of course optional.<?db2html element="br"?>
    </para>
    <para>
      All fields that take user input use a <literal>&lt;spec&gt;</literal> tag to define the details of the input field. In the some cases the content of this tag is rather simple. Input fields with a more
      complex nature tend to have accordingly complex content in this tag. Since the details vary widely, they are explained with each input field.<?db2html element="br"?>
    </para>
    <para>
      Any number of <literal>&lt;createForPack name=''a pack name'' /&gt;</literal> tags can be added to the <literal>&lt;panel&gt;</literal> and <literal>&lt;field&gt;</literal> sections. This tag has only one attribute and no
      data. The attribute is <literal>name</literal> and specifies the name of one of the installation packs that you have defined. Here is how it works: if no <literal>&lt;createForPack ...&gt;</literal> tag exists in
      a section, the entity is always created. However, if the tag exists, the entity is only created if one or more of the listed packs are selected for installation. As mentioned before, if you are
      using this feature, make sure the user input panel shows up after the packs panel.<?db2html element="br"?>
    </para>
    <title>
      Internationalization
    </title>
    <para>
      To provide internationalization you can create a file named <literal>userInputLang.xml_xyz</literal> where <literal>xyz</literal> is the ISO3 code of the language in lowercase. Please be aware that case is
      significant. This file has to be inserted in the resources section of <literal>install.xml</literal> with the <literal>id</literal> and <literal>src</literal> attributes set at the name of the file.<?db2html element="br"?>
    </para>
    <para>
      Example:<?db2html element="br"?>
    </para>
    <para>
      If you have the following userInputSpec.xml and you want to internationalize <literal>input.comment</literal>, <literal>input.proxy</literal>, <literal>input.port</literal> for english and french you have to create two
      files named userInputLang.xml_eng and userInputLang.xml_fra:
    </para>
<programlisting>
&lt;userInput&gt;
&lt;panel order="0"&gt;
  &lt;field type="staticText" align="left" txt="My comment is here." id="input.comment"/&gt;
  &lt;field type="text" variable="proxyaddress"&gt;
        &lt;spec txt="Proxy Host:" id="input.proxy" size="25" set=""/&gt;
  &lt;/field&gt;
  &lt;field type="text" variable="proxyPort"&gt;
       &lt;spec txt="Proxy Port:" id="input.port" size="6" set=""/&gt;
  &lt;/field&gt;
&lt;/panel&gt;
&lt;/userInput&gt;
</programlisting>
    <para>
      userInputLang.xml_eng file contains:
    </para>
<programlisting>
&lt;langpack&gt;
  &lt;str id="input.comment" txt="English:My comment is here."/&gt;
  &lt;str id="input.proxy" txt="English:Proxy Host:"/&gt;
  &lt;str id="input.port" txt="English:Proxy Port:"/&gt;
&lt;/langpack&gt;
</programlisting>
    <para>
      userInputLang.xml_fra file contains:
    </para>
<programlisting>
&lt;langpack&gt;
  &lt;str id="input.comment" txt="French:My comment is here."/&gt;
  &lt;str id="input.proxy" txt="French:Proxy Host:"/&gt;
  &lt;str id="input.port" txt="French:Proxy Port:"/&gt;
&lt;/langpack&gt;
</programlisting>
    <para>
      you will also have to add the following to the install.xml file
    </para>
<programlisting>
&lt;resources&gt;
  ...
  &lt;res id="userInputSpec.xml" src="userInputSpec.xml"/&gt;
  &lt;res id="userInputLang.xml_eng" src="userInputLang.xml_eng" /&gt;
  &lt;res id="userInputLang.xml_fra" src="userInputLang.xml_fra" /&gt;
  ...
&lt;/resources&gt;
</programlisting>
    <title>
      Panel Title
    </title>
    <para>
      You can place an optional title at the top of the panel. Though it is not possible to select a font for the title that is different form the one used on the rest of the panel, it is possible to
      modify the font to some extent. To specify the title create a <literal>&lt;field&gt;</literal> tag and use the <literal>type</literal> attribute with the value <literal>title</literal>. In addition to the <literal>txt</literal> and
      <literal>id</literal> attributes, the following attributes are supported:<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">italic</emphasis> <literal>- optional</literal><?db2html element="br"?>
    </para>
    <para>
      With a value of <literal>true</literal> specifies that the title font should be in italics.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">bold</emphasis> <literal>- optional</literal><?db2html element="br"?>
    </para>
    <para>
      With a value of <literal>true</literal> specifies that the title font should be bold.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">size</emphasis> <literal>- optional</literal><?db2html element="br"?>
    </para>
    <para>
      This attribute specifies the size of the title font. Please note that the size is not specified in points but as a relative size multiplier compared to the body font on the panel. The default
      value is 2.<?db2html element="br"?>
    </para>
    <title>
      Static Text
    </title>
    <para>
      Static text is simply text that is placed on the panel without direct connection to any of the input elements. It is laid out to use the entire layout width available on the panel and is broken
      into multiple lines if necessary. To specify static text create a <literal>&lt;field&gt;</literal> tag and use the <literal>type</literal> attribute with a value of <literal>staticText</literal>. In addition to the <literal>
      txt</literal> and <literal>id</literal> attributes, the text can be justified <literal>left</literal>, <literal>center</literal> or <literal>right</literal> with the <literal>align</literal> attribute. It is not possible to format this text in any
      way.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">Example</emphasis><?db2html element="br"?>
    </para>
    <para>
      The following example inserts some static text in the panel.
    </para>
<programlisting>
&lt;field type="staticText" align="left" 
       txt="This is just some simple static text."
       id="staticText.text"/&gt;
</programlisting>
    <title>
      Visual Separation
    </title>
    <para>
      Sometimes it is desirable to separate different entities visually. This can be accomplished by inserting a space or a divider. A space simply inserts a vertical separation of the average height
      of a single line entity, such as a line of text or a an input field. A divider inserts the same amount of space but also draws a division line which can be either aligned at the top or bottom
      of the separation.
    </para>
    <para>
    	<literal>&lt;field type="divider" /&gt;</literal><?db2html element="br"?>
    	<literal>&lt;field type="space" /&gt;</literal>
    </para>
    <para>
      ..... maybe i should draw the line myself and add no additional space at all ...
    </para>
    <title>
      Text Input
    </title>
    <para>
      A text input field allows the user to enter and edit a single line of text, without length restriction. The input field can have a label, which will show to the left of the input field and a
      description, which can span multiple lines. The description is placed above the input field and uses the entire available layout width. The width of the input field must be explicitly set,
      otherwise it will only accommodate a single character. To specify a text input field create a <literal>&lt;field&gt;</literal> tag and use the <literal>type</literal> attribute with a value of <literal>text</literal>. The
      <literal>txt</literal> and <literal>id</literal> attributes are not supported here. The <literal>variable</literal> attribute specifies the variable that should be replaced with the text taken from the input field.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">The Data</emphasis><?db2html element="br"?>
    </para>
    <para>
      The data consists of two items, a description and the spec. The <literal>&lt;spec&gt;</literal> tag uses four attributes. The label text is specified with <literal>txt</literal> and/or <literal>id</literal> as described
      above. In addition, the width of the input field as it appears on the panel can be set with the <literal>size</literal> attribute. The value must be an integer and sets the field width based on the
      average character width of the active font. If this is not specified, then you will end up with a very narrow field that is practically unusable.<?db2html element="br"?>
    </para>
    <para>
      The fourth attribute <literal>set</literal> is optional. It takes a text string to pre-fill the input field.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">Example</emphasis><?db2html element="br"?>
    </para>
    <para>
      The following example creates a text input field with a label and description. The width of the input field will be enough to accommodate 15 characters. The field will be pre-set with the text
      'some text' when the UI is first presented.<?db2html element="br"?>
    </para>
<programlisting>
&lt;field type="text" variable="textInput"&gt;
  &lt;description align="left" txt="A description for a text input field"
               id="description.text"/&gt;
  &lt;spec txt="Enter some text:" id="text.label" size="15" set="some text"/&gt;
&lt;/field&gt;
</programlisting>
    <title>
      Radio Buttons
    </title>
    <para>
      The radio buttons are useful when the user needs to select a specific option out of a pre-defined list of choices. This field offers an arbitrary number of mutually exclusive buttons, each with
      its own label. The placement of the buttons and labels is different form other fields. First, the button is placed to the left and the label text to the right. Second, the buttons are not lined
      up all the way to the left as other labels are but they are indented from that location. As with other fields, the description is placed above the list of radio buttons and uses the entire
      available layout width. To specify a set of radio buttons create a <literal>&lt;field&gt;</literal> tag and use the <literal>type</literal> attribute with a value of <literal>radio</literal>. The <literal>txt</literal> and <literal>
      id</literal> attributes are <emphasis role="b">not</emphasis> supported here. As with all other input fields, the <literal>variable</literal> attribute specifies that variable that should be replaced with the user selection.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">The Data</emphasis><?db2html element="br"?>
    </para>
    <para>
      The data consists of two items, a description and the spec. The <literal>&lt;spec&gt;</literal> tag has no attributes, instead the specification details are entered as data within the <literal>
      &lt;spec&gt;</literal> tag. The <literal>&lt;spec&gt;</literal> data consists of one or more <literal>&lt;choice&gt;</literal> tags. One <literal>&lt;choice&gt;</literal> tag is required for each radio button. The <literal>
      &lt;choice&gt;</literal> tag accepts the usual <literal>txt</literal> and <literal>id</literal> attributes, which are used to specify the label text. In addition the following attributes are supported:<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">value</emphasis> <literal>- required</literal><?db2html element="br"?>
    </para>
    <para>
      The <literal>value</literal> attribute is used to specify which value to insert if this associated radio button is selected. In other words, the label text has nothing to do with the value that is
      actually substituted for the variable. For this reason there is never an issue if multiple languages are used, the value is always the same for a given selection.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">set</emphasis> <literal>- optional</literal><?db2html element="br"?>
    </para>
    <para>
      The <literal>set</literal> attribute accepts the values <literal>true</literal> and <literal>false</literal>. Since the attribute is optional it can also be omitted, which is interpreted as <literal>false</literal>. If a value of
      <literal>true</literal> is used, the associated radio button will be selected when the UI is first presented. Obviously, only one of the buttons in a set should be set to <literal>true</literal>.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">Example</emphasis><?db2html element="br"?>
    </para>
    <para>
      The following example creates a set of four radio buttons with description. The second button will be selected when the UI is first presented.<?db2html element="br"?>
    </para>
<programlisting>
&lt;field type="radio" variable="radioSelection"&gt;
  &lt;description align="left" txt="This is a description for radio buttons"
               id="description.radio"/&gt;
  &lt;spec&gt;
  &lt;choice txt="the first choice" id="radio.label.1" value="1 selected" /&gt;
  &lt;choice txt="the second choice" id="radio.label.2" value="2 selected"
          set="true" /&gt;
  &lt;choice txt="the third choice" id="radio.label.3" value="3 selected" /&gt;
  &lt;choice txt="the fourth choice" id="radio.label.4" value="4 selected" /&gt;
  &lt;/spec&gt;
&lt;/field&gt;
</programlisting>
    <title>
      Combo Box
    </title>
    <para>
      The combo box provides essentially the same functionality as do the radio buttons, just in a different presentation stile. The advantage of the combo box is that it is easier to deal with a
      long list of choices.<?db2html element="br"?>
    </para>
    <title>
      Check Box
    </title>
    <para>
      If there are a number of choices and any combination of them could be selected, not just a single one, then radio buttons are not the way to go. You might be better off using a number of check
      boxes. The layout for a check box works in the same way as for radio buttons. The check box is placed indented from the left most edge and the label text is placed to the right of it. Other
      than with radio buttons, you cannot define any number of check boxes. This field allows the definition of only one check box, which is associated with one variable. If you need multiple check
      boxes you need to define one field for each of them. To make it look like a cohesive group you simply provide a description only for the first check box. All of the check boxes will be
      positioned in such a way that they look like a group, even though they are separate entities and their selections are conveyed to different variables. The description is placed above the check
      box and uses the entire available layout width. To specify a check box create a <literal>&lt;field&gt;</literal> tag and use the <literal>type</literal> attribute with a value of <literal>check</literal>. As with all other
      input fields, the <literal>variable</literal> attribute specifies the variable that should be replaced with the user input.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">The Data</emphasis><?db2html element="br"?>
    </para>
    <para>
      The data consists of two items, a description and the spec. The <literal>&lt;spec&gt;</literal> tag accepts the usual <literal>txt</literal> and <literal>id</literal> attributes, which are used to specify the label text. In
      addition, the following attributes are supported:<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">true</emphasis> <literal>- required</literal><?db2html element="br"?>
    </para>
    <para>
      The <literal>true</literal> attribute specifies the value to use for substitution when the box is selected.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">false</emphasis> <literal>- required</literal><?db2html element="br"?>
    </para>
    <para>
      The <literal>false</literal> attribute specifies the value to use for substitution when the box is not selected.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">set</emphasis> <literal>- optional</literal><?db2html element="br"?>
    </para>
    <para>
      The <literal>set</literal> attribute accepts the values <literal>true</literal> and <literal>false</literal>. Since the attribute is optional it can also be omitted, which is interpreted as <literal>false</literal>. If a value of
      <literal>true</literal> is used, the check box will be selected when the UI is first presented.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">Example</emphasis><?db2html element="br"?>
    </para>
    <para>
      The following example creates a check box with description. The check box will not be selected when the UI is first presented. This could also be accomplished by omitting the <literal>set</literal>
      attribute.<?db2html element="br"?>
    </para>
<programlisting>
&lt;field type="check" variable="chekSelection.1"&gt;
  &lt;description align="left" txt="This is a description for a check box"
               id="description.check.1"/&gt;
  &lt;spec txt="check box 1" id="check.label.1" true="on" false="off" 
        set="false"/&gt;
&lt;/field&gt;
</programlisting>
    <title>
      Rule Input
    </title>
    <para>
      The rule input field is the most powerful and complex one of all the input fields offered by this panel. In its most simple incarnation it looks and works like a regular text input field. There
      is also only an incremental increase of the complexity in the specification for this case. However, it is unlikely that you would use it for such a purpose. The real power of this input field
      comes from the fact that rules can be applied to it that control many aspects of its look as well as overt and covert operation.<?db2html element="br"?>
    </para>
    <para/><section id="SECTION008111000000000000000"><title>
      Layout and Input Rules
    </title>
    <para>
      The basic nature of this input field is that of a text input field and as mentioned before, in its most simple incarnation that is what it looks like and how it operates. However, the layout of
      the field can be defined in such a way that there are multiple logically interconnected text input fields, adorned with multiple labels. Further more, each of these fields can be instructed to
      restrict the type of input that will be accepted. Now you might ask what this could be useful for. As an answer, let me present a few examples that show how this feature can be used. Before i
      do this however, i would like to describe the specification syntax, so that the examples can be presented together with the specifications that make them work in a meaningful way.<?db2html element="br"?>
    </para>
    <para>
      The actual specification of the layout, the labels and the type of input each field accepts all happens in a single string with the <literal>layout</literal> attribute. First let us have a look at the
      specification format for a single field. This format consists of a triplet of information, separated by two colons ':'. A typical field spec would look like this: <literal>N:4:4</literal>, where the
      first item is a key that specifies the type of input this particular field will accept - numeric input in the example. The second item is an integer number that specifies the physical width of
      the field, this is the same as in the with of any regular text field. Therefore the field in the example will provide space to display four characters. The third item specifies the editing
      length of the string or in other words, the maximum length of the string that will be accepted by the field. In the <literal>layout</literal> string you can list as may fields as you need, each with its
      own set of limitations. In addition you can add text at the front, the end and in between the fields. The various entities must be separated by white space. The behavior of this field is such
      that when the editing length of a field has been reached, the cursor automatically moves on to the next field. Also, when the backspace key is used to delete characters and the beginning of a
      field has been reached, the cursor automatically moves on to the previous field. So let us have a look a some examples.<?db2html element="br"?>
    </para>
    <para>
      <emphasis role="b">Phone Number</emphasis>
    </para>
    <para>
      The following specification will produce a pre formatted input field to accept a US phone number with in-house extension. Even though the pattern is formatted into number groups as customary,
      complete with parentheses '(' and dash '-', entering the number is as simple as typing all the digits. There is no need to advance using the tab key or to enter formatting characters. Because
      the fields only allow numeric entry, there is a much reduced chance for entering erroneous information. <literal>"( N:3:3 ) N:3:3 - N:4:4 x N:5:5"</literal>. Each of the fields uses the 'N' key,
      indicating that only numerals will be accepted. Also, each of the fields only accepts strings of the same length as the physical width of the field.<?db2html element="br"?>
    </para>
    
      <informalfigure><mediaobject><imageobject><imagedata fileref="img7.png" width="332">122</imagedata></imageobject><caption><para>\fbox{\includegraphics[scale=1.0]{img/userInput-phone}}</para></caption></mediaobject></informalfigure>
    
    <para>
      <emphasis role="b">E-Mail address</emphasis>
    </para>
    <para>
      This specification creates a pattern that is useful for entering an e-mail address <literal>"AN:15:U @ AN:10:40 . A:4:4"</literal>. Even though the first field is only fifteen characters wide it will
      accept a string of unlimited length, because the 'U' identifier is used for the edit length. The second field is a bit more restrictive by only accepting a string up to forty characters
      long.<?db2html element="br"?>
    </para>
    
      <informalfigure><mediaobject><imageobject><imagedata fileref="img8.png" width="453">131</imagedata></imageobject><caption><para>\fbox{\includegraphics[scale=1.0]{img/userInput-email}}</para></caption></mediaobject></informalfigure>
    
    <para>
      <emphasis role="b">IP address</emphasis>
    </para>
    <para>
      It might not be uncommon to require entering of an IP address. The following simple specification will produce the necessary input field. All fields are the same, allowing just three digits of
      numerical entry. <literal>"N:3:3 . N:3:3 . N:3:3 . N:3:3"</literal><?db2html element="br"?>
    </para>
    
      <informalfigure><mediaobject><imageobject><imagedata fileref="img9.png" width="281">131</imagedata></imageobject><caption><para>\fbox{\includegraphics[scale=1.0]{img/userInput-IP}}</para></caption></mediaobject></informalfigure>
    
    <para>
      <emphasis role="b">Serial Number or Key Code</emphasis>
    </para>
    <para>
      If you ship your product with a CD key code or serial number and require this information for registration, you might want to ask the customer to transcribe that number from the CD label, so
      that it is later on accessible to your application. As this is always an error prone operation, the predefined pattern with the easy editing support and restriction of accepted data helps to
      reduce transcription errors <literal>"H:4:4 - N:6:6 - N:3:3"</literal>. This particular specification will produce three fields, the first accepting four hexadecimal, the second six numerical and the
      third three numerical digits.<?db2html element="br"?>
    </para>
    
      <informalfigure><mediaobject><imageobject><imagedata fileref="img10.png" width="265">131</imagedata></imageobject><caption><para>\fbox{\includegraphics[scale=1.0]{img/userInput-serial}}</para></caption></mediaobject></informalfigure>
    
    <para>
      <emphasis role="b">Limitations</emphasis>
    </para>
    <para>
      Even though the above examples all use single character labels between fields, there is no restriction on the length of these labels. In addition, it is possible to place label text in front of
      the first field and after the last field and the text can even contain spaces. The only limitation in this regard is the fact that all white space in the text will be reduced to a single space
      on the display. This means that it is not possible to use multiple spaces or tabs in the text.<?db2html element="br"?>
    </para>
    <para>
      The following table lists and describes all the keys that can be used in the specification string.<?db2html element="br"?>
    </para>
   
      <informaltable><tgroup cols="3"><thead><row><entry>
            <emphasis role="i">Key</emphasis>
          </entry><entry>
            <emphasis role="i">Meaning</emphasis>
          </entry><entry>
            <emphasis role="i">Description</emphasis>
          </entry></row>
</thead><tbody><row><entry>
            N
          </entry><entry>
            numeric
          </entry><entry>
            The field will accept only numerals.
          </entry></row>
<row><entry>
            H
          </entry><entry>
            hexadecimal
          </entry><entry>
            The field will accept only hexadecimal numerals, that is all numbers from 0-F.
          </entry></row>
<row><entry>
            A
          </entry><entry>
            alphabetic
          </entry><entry>
            The field will accept only alphabetic characters. Numerals and punctuation marks will not be accepted.
          </entry></row>
<row><entry>
            AN
          </entry><entry>
            alpha-numeric
          </entry><entry>
            The field will accept alphabetic characters and numerals but no punctuation marks.
          </entry></row>
<row><entry>
            O
          </entry><entry>
            open
          </entry><entry>
            The filed will accept any input, without restriction.
          </entry></row>
<row><entry>
            U
          </entry><entry>
            unlimited
          </entry><entry>
            This key is only legal for specifying the editing length of a fields. If used, the field imposes no length restriction on the text entered.
          </entry></row>
</tbody></tgroup></informaltable>
    
    <para/></section><section id="SECTION008112000000000000000"><title>
      Setting Field Content
    </title>
    <para>
      Like all other input fields the rule input field can also be pre-filled with data and as usual, this is accomplished thought the <literal>set</literal> attribute. As you might expect, the details of
      setting this field are rather on the complicated side. In fact you can set each sub field individually and you can leave some of the fields blank in the process. The <literal>set</literal> specification
      for all sub fields is given in a single string. Each field is addressed by its index number, with the count starting at 0. The index is followed by a colon ':' and then by the content of the
      field. The string "0:1234 1:af415 3:awer" would fill the first subfield with <literal>1234</literal>, the second one with <literal>af415</literal> and the fourth with <literal>awer</literal>. The third subfield would stay
      blank and so would any additional fields that might follow.<?db2html element="br"?>
    </para>
    <para>
      The individual field specs must be separated with spaces. Spaces within the pre-fill values are not allowed, otherwise the result is undefined.<?db2html element="br"?>
    </para>
    <para/></section><section id="SECTION008113000000000000000"><title>
      The Output Format
    </title>
    <para>
      The user input from all subfields is combined into one single value and used to replace the variable associated with the field. You can make a number of choices when it comes to the way how the
      subfield content is combined. This is done with the <literal>resultFormat</literal> and <literal>separator</literal> attributes. The <literal>resultFormat</literal> attribute can take the following values:<?db2html element="br"?>
    </para>
    
      <informaltable><tgroup cols="2"><thead><row><entry>
            <emphasis role="i">Value</emphasis>
          </entry><entry>
            <emphasis role="i">Meaning</emphasis>
          </entry></row>
</thead><tbody><row><entry>
            <literal>plainString</literal>
          </entry><entry>
            The content of all subfields is simply concatenated into one long string.
          </entry></row>
<row><entry>
            <literal>displayFormat</literal>
          </entry><entry>
            The content of all subfields and all labels -as displayed- is concatenated into one long string.
          </entry></row>
<row><entry>
            <literal>specialSeparator</literal>
          </entry><entry>
            The content of all subfields is concatenated into one string, using the string specified withe the <literal>separator</literal> attribute to separate the content of the subfields.
          </entry></row>
<row><entry>
            <literal>processed</literal>
          </entry><entry>
            The content is processed by Java code that you supply before replacing the variable. How to do this is described below.
          </entry></row>
</tbody></tgroup></informaltable>
    
    <para/></section><section id="SECTION008114000000000000000"><title>
      Validating the Field Content
    </title>
    <para>
      You can provide runtime validation for user input into a rule field via the <literal>validator</literal> element (which is a child of the <literal>field</literal> element. There are two types of built-in
      validators already provided: a <literal>NotEmptyValidator</literal> and a <literal>RegularExpressionValidator</literal>. You can also easily create your own validator. In all cases, if the chosen validator returns
      <literal>false</literal>, a messagebox will display the contents of the <literal>txt</literal> attribute and the user will be unable to continue to the next panel.<?db2html element="br"?>
    </para>
    <para>
      You can specify a processor for a combobox:
    </para>
<programlisting>
&lt;choice processor="fully.qualified.class.name"
        set="selectedValue"/&gt;
</programlisting>
    <para>so that you can fill a combobox with data on a simple way. </para>
    <para/><section id="SECTION008114100000000000000"><title>
      NotEmptyValidator
    </title>
    <para>
      The <literal>NotEmptyValidator</literal> simply checks that the user entered a non-null value into each subfield, and returns <literal>false</literal> otherwise.<?db2html element="br"?>
    </para>
    <para/></section><section id="SECTION008114200000000000000"><title>
      RegularExpressionValidator
    </title>
    <para>
      The <literal>RegularExpressionValidator</literal> checks that the user entered a value which matches a specified regular expression, as accepted by the Jakarta Regexp library (<literal><anchor id="tex2html29"/>http://jakarta.apache.org/regexp/</literal>). The syntax of this implementation is described in the javadoc of the <literal>RE</literal> class (<literal><anchor id="tex2html30"/>http://jakarta.apache.org/regexp/apidocs/org/apache/regexp/RE.html</literal>).
    </para>
    <para>
      You can specify the regular expression to be tested by passing a parameter with a name of <literal>pattern</literal> to the validator (via the <literal>param</literal> element), with the regular expression as the
      <literal>value</literal> attribute. For example, the following would validate an e-mail address:<?db2html element="br"?>
    </para>
<programlisting>
&lt;field type="rule" variable="EMAILaddress"&gt; 
  &lt;spec 
      txt="Your Email address:" layout="O:12:U @ O:8:40 . A:4:4" 
      set="0: 1:domain 2:com" resultFormat="displayFormat"
  /&gt;
  &lt;validator class="com.izforge.izpack.util.RegularExpressionValidator" 
      txt="Invalid email address!"&gt;
    &lt;param 
        name="pattern" 
        value="[a-zA-Z0-9._-]{3,}@[a-zA-Z0-9._-]+([.][a-zA-Z0-9_-]+)*[.][a-zA-Z0-9._-]{2,4}"
    /&gt;
  &lt;/validator&gt; 
&lt;/field&gt;
</programlisting>
    <para>
      You can test your own regular expressions using the handy applet at <literal><anchor id="tex2html31"/>
      http://jakarta.apache.org/regexp/applet.html</literal> .<?db2html element="br"?>
    </para>
    <para/></section><section id="SECTION008114300000000000000"><title>
      Creation Your Own Custom Validator
    </title>
    <para>
      You can create your own custom Validator implementation simply by creating a new class which implements the <literal>com.izforge.izpack.panels.Validator</literal> interface. This interface specifies a
      single method: <literal>validate(ProcessingClient client)</literal> , which returns a <literal>boolean</literal> value. You can retrieve the value entered by the user by casting the input ProcessingClient as a
      <literal>RuleInputField</literal> and calling the<?db2html element="br"?>
      <literal>RuleInputField.getText()</literal> method. You can also retrieve any parameters to your custom <literal>Validator</literal> by calling the<?db2html element="br"?>
      <literal>RuleInputField.getValidatorParams()</literal> which returns a <literal>java.util.Map</literal> object containing parameter names mapped to parameter values. For an example, take a look at<?db2html element="br"?>
      <literal>com.izforge.izpack.util.RegularExpressionValidator</literal>.<?db2html element="br"?>
    </para>
    <para>
      Set values in the RuleInputField can be preprocessed. At now you can specify a processor class to pre process a value to be set at initial value of a RuleInputField. Syntax:
    </para>
<programlisting>
&lt;spec set="0:defaultVal:classname" .../&gt;
</programlisting>
    <para>The class name is an optional value. The class must implement the <literal>Processor</literal> interface. <?db2html element="br"?></para>
    <para/></section></section><section id="SECTION008115000000000000000"><title>
      Processing the Field Content
    </title>
    <para>
      This feature needs to be documented.
    </para>
    <para/></section><section id="SECTION008116000000000000000"><title>
      Summary Example
    </title>
<programlisting>
&lt;field type="rule" variable="test1"&gt;
  &lt;description align="left" txt="A description for a rule input field."
               id="description.rule.1"/&gt;
  &lt;spec txt="Please enter your phone number:" 
        layout="( N:3:3 ) N:3:3 - N:4:4 x N:5:5" 
        resultFormat="specialSeparator" separator="."/&gt;
  &lt;validator class="com.izforge.izpack.util.NotEmptyValidator"
             txt="The phone number is mandatory!" /&gt;
  &lt;!--processor class=""/--&gt;
&lt;/field&gt;
</programlisting>
    <title>
      Search
    </title>
    <para>
      The search input field allows the user to choose the location of files or directories. It also supports auto-detection of the location using a list of suggestions. The field is basically a
      combobox with an extra button to trigger auto-detection (again).
    </para>
    
      <informalfigure><mediaobject><imageobject><imagedata fileref="img11.png" width="470">165</imagedata></imageobject><caption><para>\fbox{\includegraphics[scale=0.8]{img/userInput-search}}</para></caption></mediaobject></informalfigure>
    
    <para/></section><section id="SECTION008121000000000000000"><title>
      Specification
    </title>
    <para>
      The <literal>&lt;description&gt;</literal> tag is the same as with other fields (see <link linkend="userInput:descriptiontag">6.2</link> on page <ulink url="node8.html#userInput:descriptiontag"><informalfigure><mediaobject><imageobject><imagedata fileref="crossref.png"/></imageobject><caption><para>[*]</para></caption></mediaobject></informalfigure></ulink>). The <literal>&lt;spec&gt;</literal> tag supports the following attributes:
    </para>
    <itemizedlist spacing="compact"><listitem><para>
        <literal>filename</literal> - the name of the file or directory to search for
      </para></listitem><listitem><para>
        <literal>type</literal> - what to search for 
        <itemizedlist spacing="compact"><listitem><para>
            <literal>file</literal> - search for a file
          </para></listitem><listitem><para>
            <literal>directory</literal> - search for a directory
          </para></listitem></itemizedlist>
      </para></listitem><listitem><para>
        <literal>result</literal> - what to return as the search result 
        <itemizedlist spacing="compact"><listitem><para>
            <literal>file</literal> - result of search is whole pathname of file or directory found
          </para></listitem><listitem><para>
            <literal>directory</literal> - only return directory where the file was found (this is the same as <literal>file</literal> when searching for directories)
          </para></listitem><listitem><para>
            <literal>parentdir</literal> - return the full path of the parent directory where the file was found
          </para></listitem></itemizedlist>
      </para></listitem><listitem><para>
        <literal>checkfilename</literal> - the name of a file or directory to check for existence (this can be used to validate the user's selection)
      </para></listitem></itemizedlist>
    <para/></section><section id="SECTION008122000000000000000"><title>
      Example
    </title>
<programlisting>
&lt;field type="search" variable="java_sdk_home"&gt;
  &lt;description align="left" 
               txt="This is a description for a search input field."
               id="description.java_sdk_home"/&gt;
  &lt;spec txt="Path to Java SDK:" checkfilename="lib/tools.jar"
        type="file" result="directory"&gt;
  &lt;choice value="/usr/lib/java/" os="unix" /&gt;
  &lt;choice value="/opt/java" os="unix" /&gt;
  &lt;choice value="C:\Program Files\Java" os="windows" /&gt;
  &lt;choice value="C:\Java" os="windows" /&gt;
  &lt;/spec&gt;
&lt;/field&gt;
</programlisting>
    <hr xmlns="http://www.w3.org/1999/xhtml"/>
       
	<informaltable><tgroup cols="2"><tbody><row><entry><anchor id="tex2html501"/><informalfigure><mediaobject><imageobject><imagedata fileref="next.png" width="37">24</imagedata></imageobject><caption><para>next</para></caption></mediaobject></informalfigure> <anchor id="tex2html497"/><informalfigure><mediaobject><imageobject><imagedata fileref="up.png" width="26">24</imagedata></imageobject><caption><para>up</para></caption></mediaobject></informalfigure> <anchor id="tex2html491"/><informalfigure><mediaobject><imageobject><imagedata fileref="prev.png" width="63">24</imagedata></imageobject><caption><para>previous</para></caption></mediaobject></informalfigure> <anchor id="tex2html499"/><informalfigure><mediaobject><imageobject><imagedata fileref="contents.png" width="65">24</imagedata></imageobject><caption><para>contents</para></caption></mediaobject></informalfigure></entry><entry><ulink url="http://validator.w3.org/check?uri=referer"><informalfigure><mediaobject><imageobject><imagedata fileref="http://www.w3.org/Icons/valid-xhtml10">31</imagedata></imageobject><caption><para>Valid XHTML 1.0!</para></caption></mediaobject></informalfigure></ulink> <ulink url="http://jigsaw.w3.org/css-validator/"><informalfigure><mediaobject><imageobject><imagedata fileref="http://jigsaw.w3.org/css-validator/images/vcss">31</imagedata></imageobject><caption><para>Valid CSS!</para></caption></mediaobject></informalfigure></ulink></entry></row>
<row><entry><emphasis role="b">Next:</emphasis> <anchor id="tex2html502"/>Custom Actions <emphasis role="b">Up:</emphasis> <anchor id="tex2html498"/>izpack-doc <emphasis role="b">Previous:</emphasis> <anchor id="tex2html492"/>Creating Your Own Panels <emphasis role="b"><anchor id="tex2html500"/>Contents</emphasis></entry></row>
</tbody></tgroup></informaltable>
	
	<address xmlns="http://www.w3.org/1999/xhtml">
      Julien Ponge 2005-05-24
    </address>
  <para/></section></article>