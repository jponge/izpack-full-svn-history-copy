
=====================================================
TestLangPacks utility for IzPack installation program
=====================================================

This file is the help file for IzPack developers who want to translate
language files.


Possibilities:
1) just translate language file
2) develop or investigate utility


1) Just translate language file
   ----------------------------
   Read the file: izpack-translators.txt

   As a developer you can update language files using subversion (svn)
   client program. Language files are located at:

   http://svn.codehaus.org/izpack/izpack-src/trunk/bin/langpacks/installer/

   Please note that IzPack could have beta release tag which can
   also contain its own language files. Beta release could be the
   release which is updated more frequently than codes in trunk. But
   after actual release has been came out, its codebase is merged into
   trunk. This might be the reason why there could be untranslated
   strings when version will come out.

   Only developers can update language files (and other source files)
   into subversion database. Others have to make JIRA issue and
   include the file into it. To make JIRA issue and what to fill into
   it please read "4) JIRA issue" in the file izpack-translators.txt.


2) Develop or investigate utility
   ------------------------------

   NOTE: This guidance has been done with following applications:
         - Eclipse 3.4.2
         - jUnit 4
         - Ant 1.7

   Developing TestLangPacks
   ------------------------
   TestLangPacks utility is under maintenance of IzPack Installer. You
   can get from Codehaus.org:

      https://svn.codehaus.org/izpack/izpack-testlangpacks/trunk

   You need client software which has "subversion" functionality (e.g.
   TortoiseSVN in Windows).

   Test and beta versions can be obtained from Snapshot area (if any):

      http://snapshots.dist.codehaus.org/izpack/testlangpacks

   There are project configuration files for Eclipse.
   The file build.xml is used for making release version. To use it
   open it into Eclipse, open Outline window and select with mouse
   right button "all [default]". In the pop-up menu select
   "Run As -> Ant Build". Using Ant will generate the release based
   on information found in build.xml. By the default debugging
   information is OFF.

   Please note: build.xml will build only TestLangPacks sources,
   NOT unit tests! It is used only to generate distribute package!
   To compile unit tests as well you have to use Eclipse's
   "Build Project". Before using it, activate the project
   "IzPack-TestLangPacks" and select then "Project" -> "Clean".
   Using other development IDEs you have add manually unit tests
   sources and jUnit 4 library into the IDE's project (if its import
   won't do it).

   During developing and debugging it would be good idea to
   switch ON "Build Automatically" feature in Eclipse (see menu
   Project). It will inform immedialtelly about possible coding
   errors.


   Hint for debugging
   ------------------
   If you debug this routine inside Eclipse current working directory
   will be project directory: for example workspace\IzPack-
   TestLangPacks. All file operations will be done to this directory
   if file with path isn't specified in the command line of the
   TestLangPacks.jar. If omitting path you have to copy all needed
   language files into project root directory.


   Generating documentation
   ------------------------
   If you want to change document generation you can select from two
   opportunities: 1) update build.xml of TestLangPacks or 2) make
   separate file. If you are familiar with Ant you can
   select option 1). Otherwise you can use Eclipse to generate the
   file for you. The content of the file can be used to update
   the content of build.xml file (task: "task.gen.javadoc_and_zip").
   
   If you want to include tests or change settings of the
   documentation generate documentation in IDE:
   "Project" -> "Javadoc". Wizard will open. Make the needed
   checkings on the window and press Next button to go through the
   windowses. Finally press Finish button. Save the settings to the
   default file: javadoc.xml. You can now leave it there (won't then
   disturb build.xml content) or you can copy it into build.xml
   task: "task.gen.javadoc_and_zip" (don't overwrite Ant properties!).

   NOTE: If you desided to copy settings into build.xml and intended
         these changes for your use only be aware not to commit them
         into version database!


Version checking: advanced
--------------------------
   In addition to izpack-translators.txt file guidance concerning
   version checking you can check the version of the jar file. Open
   TestLangPacks.jar with GUI zip utility (WinZip or equivalent) or
   unzip the jar content into somewhere. See the content of the file:

      /meta-inf/Manifest.mf

   Find attribute: "Implementation-Version".


How to follow-up language file changes
--------------------------------------
   If you follow-up language files in trunk
   (http://svn.codehaus.org/izpack/izpack-src/trunk/bin/langpacks/installer/)

   all your translations won't perhaps be in your language file.

   One solution is to subscribe to IzPack developer mailing list
   (dev@izpack.codehaus.org) which will have announcement when
   branch is scheduled to happen. Before that branch you will make
   desired translations if any.

   Mailing lists are found at:

      http://xircles.codehaus.org/projects/izpack/lists

   Mailing list announce@izpack.codehaus.org will have announcements
   about IzPack releases. Do not rely on these messages: when you
   receive this message you are late to do translations.
